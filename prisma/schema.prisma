generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @updatedAt @db.Timestamptz(6)
  name              String
  balance           Float          @default(0)
  id                String         @id
  userId            String
  users             users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      transactions[]

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model bank_accounts {
  id           String         @id
  user_id      String
  name         String
  balance      Decimal        @db.Decimal
  type         String
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @updatedAt @db.Timestamptz(6)
  users        users          @relation(fields: [user_id], references: [id])
  transactions transactions[]
}

model categories {
  id           String         @id
  user_id      String
  name         String
  type         String
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  color        String?
  icon         String?
  is_default   Boolean        @default(false) // Add this line
  updated_at   DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  users        users          @relation(fields: [user_id], references: [id])
  transactions transactions[]

  @@unique([user_id, name, type])
}

model profiles {
  id         String   @id
  full_name  String
  email      String
  phone      String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)
  user       users    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model sessions {
  sessionToken String   @unique
  expires      DateTime
  id           String   @id
  userId       String
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @updatedAt @db.Timestamptz(6)
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model transactions {
  id            String         @id
  user_id       String
  amount        Decimal        @db.Decimal(10, 2)
  description   String?
  category      String
  type          String
  date          DateTime       @db.Timestamptz(6)
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  bankAccountId String?
  categoryId    String?
  accountId     String?
  updated_at    DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  accounts      accounts?      @relation(fields: [accountId], references: [id])
  bank_accounts bank_accounts? @relation(fields: [bankAccountId], references: [id])
  categories    categories?    @relation(fields: [categoryId], references: [id])
  users         users          @relation(fields: [user_id], references: [id])

  @@index([user_id, date])
  @@index([category])
}

model subscriptions {
  id                        String    @id @default(uuid())
  user_id                   String    @unique
  plan_id                   String
  stripe_customer_id        String?
  stripe_subscription_id    String?
  stripe_price_id           String?
  stripe_current_period_end DateTime?
  status                    String    @default("inactive")
  start_date                DateTime  @default(now())
  end_date                  DateTime
  created_at                DateTime  @default(now())
  updated_at                DateTime  @updatedAt
  user                      users     @relation("UserActiveSubscription", fields: [user_id], references: [id], onDelete: Cascade, map: "subscriptions_user_active_fkey")
  plan                      plans     @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "subscriptions_plan_fkey")
  user_subscriptions        users     @relation("UserSubscriptions", fields: [user_id], references: [id], map: "subscriptions_user_subscriptions_fkey")

  @@index([user_id])
  @@index([plan_id])
}

model user_goals {
  id                String   @id @default(uuid())
  user_id           String   @unique
  monthly_budget    Float    @default(0)
  savings_goal      Float    @default(0)
  savings_frequency String   @default("monthly")
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @updatedAt @db.Timestamptz(6)
  user              users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_preferences {
  id                  String   @id @default(uuid())
  user_id             String   @unique
  email_notifications Boolean  @default(true)
  marketing_emails    Boolean  @default(false)
  transaction_alerts  Boolean  @default(true)
  budget_alerts       Boolean  @default(true)
  theme               String   @default("light")
  language            String   @default("pt-BR")
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @updatedAt @db.Timestamptz(6)
  user                users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Modelo para configurações de orçamento
model budgetSettings {
  id            String   @id @default(uuid())
  userId        String   @unique
  monthlyBudget Float    @default(5000)
  savingsGoal   Float    @default(20) // percentual
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @updatedAt @db.Timestamptz(6)
  user          users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Atualizar o modelo users para incluir a relação
model users {
  id                          String            @id @default(uuid())
  name                        String
  email                       String            @unique
  password                    String
  created_at                  DateTime          @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime          @updatedAt @db.Timestamptz(6)
  role                        UserRole          @default(USER)
  avatar_url                  String?
  bio                         String?
  company                     String?
  website                     String?
  location                    String?
  notification_email          Boolean           @default(true)
  notification_push           Boolean           @default(true)
  theme                       String?
  language                    String?
  is_active                   Boolean           @default(true)
  stripe_current_period_end   DateTime?
  stripe_customer_id          String?
  stripe_price_id             String?
  stripe_subscription_id      String?
  emailNotifications          Boolean           @default(true)
  marketingEmails             Boolean           @default(false)
  phone                       String            @unique
  reset_password_token        String?
  reset_password_token_expiry DateTime?
  accounts                    accounts[]
  bank_accounts               bank_accounts[]
  categories                  categories[]
  profile                     profiles?
  sessions                    sessions[]
  transactions                transactions[]
  active_subscription         subscriptions?    @relation("UserActiveSubscription")
  subscriptions               subscriptions[]   @relation("UserSubscriptions")
  goals                       user_goals?
  preferences                 user_preferences?
  budgetSettings              budgetSettings?

  @@map("users")
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  @@unique([identifier, token])
}

model whatsapp_auth {
  id          String   @id @default("whatsapp")
  credentials String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @db.Timestamptz(6)
}

model plans {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  period      String   @default("MONTHLY")
  is_active   Boolean  @default(true)
  features    String[]
  benefits    String[]
  limitations String[]
  max_transactions Int?  // Limite de transações
  can_create_categories Boolean @default(true) // Permissão para criar categorias
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  subscriptions subscriptions[]
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  CASH
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum UserRole {
  ADMIN
  USER
}

model system_settings {
  id                    String   @id @default(uuid())
  // Formatação
  default_currency      String   @default("BRL")
  date_format          String   @default("dd/MM/yyyy")
  time_format          String   @default("HH:mm")
  decimal_separator    String   @default(",")
  thousands_separator  String   @default(".")
  
  // Limites
  max_categories       Int      @default(50)
  max_transactions     Int      @default(1000)
  max_file_size        Int      @default(5) // MB
  max_users            Int      @default(1000)
  max_plans            Int      @default(10)
  max_features_per_plan Int     @default(20)
  
  // Email
  support_email        String   @default("suporte@fincontrol.com")
  notification_email   String   @default("notificacoes@fincontrol.com")
  smtp_host           String?
  smtp_port           Int?
  smtp_user           String?
  smtp_password       String?
  smtp_secure         Boolean   @default(true)
  
  // Segurança
  token_expiration     Int      @default(3600) // em segundos
  max_login_attempts   Int      @default(5)
  lockout_time         Int      @default(900) // em segundos
  
  // Notificações
  enable_email_notifications Boolean @default(true)
  enable_push_notifications  Boolean @default(true)
  enable_whatsapp_notifications Boolean @default(false)
  
  // Integrações
  stripe_public_key    String?
  stripe_secret_key    String?
  stripe_webhook_secret String?
  whatsapp_api_key     String?
  whatsapp_api_secret  String?
  
  // Sistema
  maintenance_mode     Boolean  @default(false)
  allow_signups        Boolean  @default(true)
  default_plan         String   @default("BASIC")
  
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@map("system_settings")
}

model SystemSettings {
  id                    String   @id @default(cuid())
  default_currency      String   @default("BRL")
  date_format          String   @default("DD/MM/YYYY")
  time_format          String   @default("HH:mm")
  decimal_separator    String   @default(",")
  thousands_separator  String   @default(".")
  max_categories       Int      @default(10)
  max_transactions     Int      @default(100)
  max_file_size        Int      @default(5)
  max_users            Int      @default(100)
  max_plans            Int      @default(5)
  max_features_per_plan Int     @default(10)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
}
