{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\r\n  ComputedFields,\r\n  defineDocumentType,\r\n  makeSource,\r\n} from \"contentlayer2/source-files\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypePrettyCode from \"rehype-pretty-code\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport { visit } from \"unist-util-visit\";\r\n\r\nconst defaultComputedFields: ComputedFields = {\r\n  slug: {\r\n    type: \"string\",\r\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n  },\r\n  slugAsParams: {\r\n    type: \"string\",\r\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n  },\r\n  images: {\r\n    type: \"list\",\r\n    resolve: (doc) => {\r\n      return (\r\n        doc.body.raw.match(/(?<=<Image[^>]*\\bsrc=\")[^\"]+(?=\"[^>]*\\/>)/g) || []\r\n      );\r\n    },\r\n  },\r\n};\r\n\r\nexport const Doc = defineDocumentType(() => ({\r\n  name: \"Doc\",\r\n  filePathPattern: `docs/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n    published: {\r\n      type: \"boolean\",\r\n      default: true,\r\n    },\r\n  },\r\n  computedFields: defaultComputedFields,\r\n}));\r\n\r\nexport const Guide = defineDocumentType(() => ({\r\n  name: \"Guide\",\r\n  filePathPattern: `guides/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n    date: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n    published: {\r\n      type: \"boolean\",\r\n      default: true,\r\n    },\r\n    featured: {\r\n      type: \"boolean\",\r\n      default: false,\r\n    },\r\n  },\r\n  computedFields: defaultComputedFields,\r\n}));\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: `blog/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n    date: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n    published: {\r\n      type: \"boolean\",\r\n      default: true,\r\n    },\r\n    image: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    authors: {\r\n      type: \"list\",\r\n      of: { type: \"string\" },\r\n      required: true,\r\n    },\r\n    categories: {\r\n      type: \"list\",\r\n      of: {\r\n        type: \"enum\",\r\n        options: [\"news\", \"education\"],\r\n        default: \"news\",\r\n      },\r\n      required: true,\r\n    },\r\n    related: {\r\n      type: \"list\",\r\n      of: {\r\n        type: \"string\",\r\n      },\r\n    },\r\n  },\r\n  computedFields: defaultComputedFields,\r\n}));\r\n\r\nexport const Page = defineDocumentType(() => ({\r\n  name: \"Page\",\r\n  filePathPattern: `pages/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n  },\r\n  computedFields: defaultComputedFields,\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./content\",\r\n  documentTypes: [Page, Doc, Guide, Post],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      () => (tree) => {\r\n        visit(tree, (node) => {\r\n          if (node?.type === \"element\" && node?.tagName === \"pre\") {\r\n            const [codeEl] = node.children;\r\n\r\n            if (codeEl.tagName !== \"code\") return;\r\n\r\n            node.__rawString__ = codeEl.children?.[0].value;\r\n          }\r\n        });\r\n      },\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: \"github-dark\",\r\n          keepBackground: false,\r\n          onVisitLine(node) {\r\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty lines to be copy/pasted\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: \"text\", value: \" \" }];\r\n            }\r\n          },\r\n        },\r\n      ],\r\n      () => (tree) => {\r\n        visit(tree, (node) => {\r\n          if (node?.type === \"element\" && node?.tagName === \"figure\") {\r\n            if (!(\"data-rehype-pretty-code-figure\" in node.properties)) {\r\n              return;\r\n            }\r\n\r\n            const preElement = node.children.at(-1);\r\n            if (preElement.tagName !== \"pre\") {\r\n              return;\r\n            }\r\n\r\n            preElement.properties[\"__rawString__\"] = node.__rawString__;\r\n          }\r\n        });\r\n      },\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: [\"subheading-anchor\"],\r\n            ariaLabel: \"Link to section\",\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
